# GitHub Actions workflow for slack.rs
# Auto-generated by add-runner.sh

name: Build and Push to Harbor - slack.rs

on:
  push:
    branches: [ master,main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-push:
    runs-on: slack.rs-runners  # Custom Runner Scale Set
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: kubectl インストール
      run: |
        echo "=== kubectl インストール ==="
        
        # kubectl の最新版をインストール
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/
        
        # インストール確認
        kubectl version --client --output=yaml
        
        echo "✅ kubectl インストール完了"
        
    - name: Harbor認証情報取得
      run: |
        echo "=== Harbor認証情報取得 ==="
        
        # kubectl in-cluster設定
        export KUBECONFIG=/tmp/kubeconfig
        kubectl config set-cluster default \
            --server=https://kubernetes.default.svc \
            --certificate-authority=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt \
            --kubeconfig=$KUBECONFIG
        kubectl config set-credentials default \
            --token=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token) \
            --kubeconfig=$KUBECONFIG
        kubectl config set-context default \
            --cluster=default --user=default \
            --kubeconfig=$KUBECONFIG
        kubectl config use-context default --kubeconfig=$KUBECONFIG
        
        # Harbor認証情報取得
        kubectl get secret harbor-auth -n arc-systems -o yaml | grep "HARBOR_USERNAME:" | awk '{print $2}' | base64 -d > /tmp/harbor_username
        kubectl get secret harbor-auth -n arc-systems -o yaml | grep "HARBOR_PASSWORD:" | awk '{print $2}' | base64 -d > /tmp/harbor_password
        kubectl get secret harbor-auth -n arc-systems -o yaml | grep "HARBOR_URL:" | awk '{print $2}' | base64 -d > /tmp/harbor_url
        kubectl get secret harbor-auth -n arc-systems -o yaml | grep "HARBOR_PROJECT:" | awk '{print $2}' | base64 -d > /tmp/harbor_project
        
        chmod 600 /tmp/harbor_*
        echo "✅ Harbor認証情報取得完了"
        
    - name: Harbor Login & Docker設定
      run: |
        echo "=== Harbor Login & Docker設定 ==="
        
        HARBOR_USERNAME=$(cat /tmp/harbor_username)
        HARBOR_PASSWORD=$(cat /tmp/harbor_password)
        HARBOR_URL=$(cat /tmp/harbor_url)
        
        # /etc/hosts に Harbor エントリー追加
        echo "Harbor DNS設定を追加中..."
        echo "$HARBOR_URL harbor.local" | sudo tee -a /etc/hosts
        
        # Docker設定（DinD環境対応）
        echo "Docker設定を更新中..."
        
        # Docker daemon設定を更新（DinD環境）
        sudo mkdir -p /etc/docker
        echo "{\"insecure-registries\": [\"$HARBOR_URL\"], \"registry-mirrors\": []}" | sudo tee /etc/docker/daemon.json > /dev/null
        
        # Docker daemon再起動（DinD環境）
        sudo pkill -f dockerd || true
        sleep 3
        
        # Docker daemonをinsecure registryで起動
        sudo dockerd --insecure-registry=$HARBOR_URL --host=unix:///var/run/docker.sock --host=tcp://0.0.0.0:2375 --tls=false &
        sleep 10
        
        # Docker daemon起動確認
        docker version || (echo "Docker daemon起動失敗" && exit 1)
        
        # Docker info確認
        docker info | grep -i insecure || echo "Insecure registry設定なし"
        
        # Docker認証設定ファイル作成
        mkdir -p ~/.docker
        echo "{\"auths\":{\"$HARBOR_URL\":{\"auth\":\"$(echo -n \"$HARBOR_USERNAME:$HARBOR_PASSWORD\" | base64 -w 0)\"}},\"credHelpers\":{}}" > ~/.docker/config.json
        chmod 600 ~/.docker/config.json
        
        # Docker環境変数でinsecure registryを指定（DinD環境対応）
        export DOCKER_CONTENT_TRUST=0
        
        echo "✅ Harbor Login & Docker設定完了"
        
    - name: Docker Build
      run: |
        echo "=== Docker Build ==="
        
        HARBOR_URL=$(cat /tmp/harbor_url)
        HARBOR_PROJECT=$(cat /tmp/harbor_project)
        
        # Dockerイメージビルド（HTTP registry対応）
        HTTP_HARBOR_URL="http://$HARBOR_URL"
        docker build -t $HTTP_HARBOR_URL/$HARBOR_PROJECT/slack.rs:latest .
        docker build -t $HTTP_HARBOR_URL/$HARBOR_PROJECT/slack.rs:${{ github.sha }} .
        
        echo "✅ Docker Build完了"
        
    - name: Harbor Push
      run: |
        echo "=== Harbor Push ==="
        
        HARBOR_URL=$(cat /tmp/harbor_url)
        HARBOR_PROJECT=$(cat /tmp/harbor_project)
        HARBOR_USERNAME=$(cat /tmp/harbor_username)
        HARBOR_PASSWORD=$(cat /tmp/harbor_password)
        
        # Docker環境変数でinsecure registryを指定（DinD環境対応）
        export DOCKER_CONTENT_TRUST=0
        
        # Docker pushでHTTP接続を使用
        echo "Docker pushでHTTP接続を使用してHarborにpush中..."
        
        # Docker daemon設定確認
        echo "Docker daemon設定を確認中..."
        docker info | grep -i insecure || echo "Insecure registry設定なし"
        
        # Docker環境変数設定（追加）
        export DOCKER_HOST=unix:///var/run/docker.sock
        export DOCKER_API_VERSION=1.40
        export DOCKER_CONTENT_TRUST=0
        
        # Harbor HTTP URLを使用
        HTTP_HARBOR_URL="http://$HARBOR_URL"
        echo "HTTP Harbor URL: $HTTP_HARBOR_URL"
        
        # Docker loginをHTTPで実行
        echo "Docker loginをHTTPで実行中..."
        echo $HARBOR_PASSWORD | docker login $HTTP_HARBOR_URL -u $HARBOR_USERNAME --password-stdin
        
        # イメージはすでにHTTP URLでビルド済み
        echo "イメージは既にHTTP URLでビルド済みです"
        
        # Docker pushをHTTPで実行
        echo "DockerでHTTP接続を使用してHarborにpush中..."
        docker push $HTTP_HARBOR_URL/$HARBOR_PROJECT/slack.rs:latest
        docker push $HTTP_HARBOR_URL/$HARBOR_PROJECT/slack.rs:${{ github.sha }}
        
        echo "✅ Docker pushが成功しました"
        
        echo "✅ Harbor Push完了"
        
    - name: プッシュ結果確認
      run: |
        echo "=== プッシュ結果確認 ==="
        
        HARBOR_USERNAME=$(cat /tmp/harbor_username)
        HARBOR_PASSWORD=$(cat /tmp/harbor_password)
        HARBOR_URL=$(cat /tmp/harbor_url)
        HARBOR_PROJECT=$(cat /tmp/harbor_project)
        
        # プッシュされたイメージ確認（HTTP接続）
        HTTP_HARBOR_URL="http://$HARBOR_URL"
        curl -u $HARBOR_USERNAME:$HARBOR_PASSWORD $HTTP_HARBOR_URL/v2/$HARBOR_PROJECT/slack.rs/tags/list
        
        echo "✅ デプロイ完了"
        
    - name: クリーンアップ
      if: always()
      run: |
        echo "=== クリーンアップ ==="
        
        # 認証情報ファイルを安全に削除
        rm -f /tmp/harbor_* /tmp/kubeconfig /tmp/image-*.tar
        
        echo "✅ クリーンアップ完了"
