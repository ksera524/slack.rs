name: Harborへのビルドとプッシュ

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: slack-rs-runners 
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: 必要なツールのインストール
      run: |
        echo "=== Installing Required Tools ==="
        
        # kubectl インストール
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/
        
        # jq インストール
        if ! command -v jq &> /dev/null; then
            sudo apt-get update && sudo apt-get install -y jq
        fi
        
        echo "✅ Tools installation completed"
        
    - name: Harbor認証情報取得
      run: |
        echo "=== Retrieving Harbor Credentials Securely ==="
        
        # kubectl設定（書き込み可能な場所を使用）
        if [ -f /var/run/secrets/kubernetes.io/serviceaccount/token ]; then
            echo "✅ Running inside Kubernetes cluster"
            
            # 書き込み可能な場所にkubeconfigを作成
            export KUBECONFIG=/tmp/kubeconfig
            
            # In-cluster設定を作成
            kubectl config set-cluster default \
                --server=https://kubernetes.default.svc \
                --certificate-authority=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt \
                --kubeconfig=$KUBECONFIG
            kubectl config set-credentials default \
                --token=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token) \
                --kubeconfig=$KUBECONFIG
            kubectl config set-context default \
                --cluster=default --user=default \
                --kubeconfig=$KUBECONFIG
            kubectl config use-context default --kubeconfig=$KUBECONFIG
            
            echo "✅ kubeconfig configured"
            
            # Secret存在確認
            if kubectl get secret harbor-auth -n arc-systems >/dev/null 2>&1; then
                echo "✅ harbor-auth secret found, retrieving credentials..."
                
                # k8s Secretから認証情報を安全に取得
                kubectl get secret harbor-auth -n arc-systems -o jsonpath='{.data.HARBOR_USERNAME}' | base64 -d > /tmp/harbor_username
                kubectl get secret harbor-auth -n arc-systems -o jsonpath='{.data.HARBOR_PASSWORD}' | base64 -d > /tmp/harbor_password
                kubectl get secret harbor-auth -n arc-systems -o jsonpath='{.data.HARBOR_URL}' | base64 -d > /tmp/harbor_url
                kubectl get secret harbor-auth -n arc-systems -o jsonpath='{.data.HARBOR_PROJECT}' | base64 -d > /tmp/harbor_project
                
                # ファイル権限を制限
                chmod 600 /tmp/harbor_username /tmp/harbor_password /tmp/harbor_url /tmp/harbor_project
                
                echo "✅ Harbor credentials retrieved securely"
                echo "Harbor Username: $(cat /tmp/harbor_username)"
                echo "Harbor URL: $(cat /tmp/harbor_url)"
                echo "Harbor Project: $(cat /tmp/harbor_project)"
                
            else
                echo "❌ harbor-auth secret not found"
                echo "Please ensure the secret exists with:"
                echo "kubectl get secret harbor-auth -n arc-systems"
                exit 1
            fi
        else
            echo "❌ Not running inside Kubernetes cluster"
            exit 1
        fi
        
    - name: Harbor接続確認
      run: |
        echo "=== Harbor API Connection Test ==="
        
        # 認証情報をファイルから読み取り
        HARBOR_USERNAME=$(cat /tmp/harbor_username)
        HARBOR_PASSWORD=$(cat /tmp/harbor_password)
        HARBOR_URL=$(cat /tmp/harbor_url)
        HARBOR_PROJECT=$(cat /tmp/harbor_project)
        
        echo "Testing connection to $HARBOR_URL..."
        
        # Harbor API接続テスト
        curl -k -u $HARBOR_USERNAME:$HARBOR_PASSWORD https://$HARBOR_URL/v2/_catalog
        curl -k -u $HARBOR_USERNAME:$HARBOR_PASSWORD https://$HARBOR_URL/api/v2.0/projects | jq '.[] | select(.name=="'$HARBOR_PROJECT'")'
        
    - name: Dockerイメージビルド
      run: |
        echo "=== Docker Image Build ==="
        
        # 認証情報をファイルから読み取り
        HARBOR_USERNAME=$(cat /tmp/harbor_username)
        HARBOR_PASSWORD=$(cat /tmp/harbor_password)
        HARBOR_URL=$(cat /tmp/harbor_url)
        HARBOR_PROJECT=$(cat /tmp/harbor_project)
        
        # Docker認証設定
        mkdir -p ~/.docker
        echo '{"auths":{"'$HARBOR_URL'":{"auth":"'$(echo -n "$HARBOR_USERNAME:$HARBOR_PASSWORD" | base64 -w 0)'"}}}' > ~/.docker/config.json
        chmod 600 ~/.docker/config.json
        
        # Dockerイメージビルド
        docker build -t $HARBOR_URL/$HARBOR_PROJECT/${{ github.event.repository.name }}:latest .
        docker build -t $HARBOR_URL/$HARBOR_PROJECT/${{ github.event.repository.name }}:${{ github.sha }} .
        
    - name: Harborプッシュ
      run: |
        echo "=== Harbor Push ==="
        
        # 認証情報をファイルから読み取り
        HARBOR_USERNAME=$(cat /tmp/harbor_username)
        HARBOR_PASSWORD=$(cat /tmp/harbor_password)
        HARBOR_URL=$(cat /tmp/harbor_url)
        HARBOR_PROJECT=$(cat /tmp/harbor_project)
        
        # Docker認証
        echo $HARBOR_PASSWORD | docker login $HARBOR_URL -u $HARBOR_USERNAME --password-stdin
        
        # Dockerプッシュ
        docker push $HARBOR_URL/$HARBOR_PROJECT/${{ github.event.repository.name }}:latest
        docker push $HARBOR_URL/$HARBOR_PROJECT/${{ github.event.repository.name }}:${{ github.sha }}
        
        echo "✅ Harbor push completed successfully"
        
    - name: プッシュ結果確認
      run: |
        echo "=== Harbor Push Verification ==="
        
        # 認証情報をファイルから読み取り
        HARBOR_USERNAME=$(cat /tmp/harbor_username)
        HARBOR_PASSWORD=$(cat /tmp/harbor_password)
        HARBOR_URL=$(cat /tmp/harbor_url)
        HARBOR_PROJECT=$(cat /tmp/harbor_project)
        
        # プッシュ結果確認
        curl -k -u $HARBOR_USERNAME:$HARBOR_PASSWORD https://$HARBOR_URL/v2/$HARBOR_PROJECT/${{ github.event.repository.name }}/tags/list
        curl -k -u $HARBOR_USERNAME:$HARBOR_PASSWORD "https://$HARBOR_URL/api/v2.0/projects/$HARBOR_PROJECT/repositories"
        
        echo "=== Deployment completed successfully ==="
        
    - name: クリーンアップ
      if: always()
      run: |
        echo "=== Cleanup Sensitive Files ==="
        
        # 認証情報ファイルを安全に削除
        rm -f /tmp/harbor_username /tmp/harbor_password /tmp/harbor_url /tmp/harbor_project
        rm -f ~/.docker/config.json
        rm -f /tmp/kubeconfig
        
        echo "✅ Cleanup completed"