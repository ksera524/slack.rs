
# GitHub Actions workflow for slack.rs
# Auto-generated by add-runner.sh

name: Build and Push to Harbor - slack.rs

on:
  push:
    branches: [ master,main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-push:
    runs-on: slack.rs-runners  # Custom Runner Scale Set
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: kubectl インストール
      run: |
        echo "=== kubectl インストール ==="
        
        # kubectl の最新版をインストール
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/
        
        # インストール確認
        kubectl version --client --output=yaml
        
        echo "✅ kubectl インストール完了"
        
    - name: Harbor認証情報取得
      run: |
        echo "=== Harbor認証情報取得 ==="
        
        # kubectl in-cluster設定
        export KUBECONFIG=/tmp/kubeconfig
        kubectl config set-cluster default \
            --server=https://kubernetes.default.svc \
            --certificate-authority=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt \
            --kubeconfig=$KUBECONFIG
        kubectl config set-credentials default \
            --token=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token) \
            --kubeconfig=$KUBECONFIG
        kubectl config set-context default \
            --cluster=default --user=default \
            --kubeconfig=$KUBECONFIG
        kubectl config use-context default --kubeconfig=$KUBECONFIG
        
        # Harbor認証情報取得
        kubectl get secret harbor-auth -n arc-systems -o yaml | grep "HARBOR_USERNAME:" | awk '{print $2}' | base64 -d > /tmp/harbor_username
        kubectl get secret harbor-auth -n arc-systems -o yaml | grep "HARBOR_PASSWORD:" | awk '{print $2}' | base64 -d > /tmp/harbor_password
        kubectl get secret harbor-auth -n arc-systems -o yaml | grep "HARBOR_URL:" | awk '{print $2}' | base64 -d > /tmp/harbor_url
        kubectl get secret harbor-auth -n arc-systems -o yaml | grep "HARBOR_PROJECT:" | awk '{print $2}' | base64 -d > /tmp/harbor_project
        
        chmod 600 /tmp/harbor_*
        echo "✅ Harbor認証情報取得完了"
        
    - name: Harbor Login & Docker設定
      run: |
        echo "=== Harbor Login & Docker設定 ==="
        
        HARBOR_USERNAME=$(cat /tmp/harbor_username)
        HARBOR_PASSWORD=$(cat /tmp/harbor_password)
        HARBOR_URL=$(cat /tmp/harbor_url)
        
        # /etc/hosts に Harbor エントリー追加
        echo "Harbor DNS設定を追加中..."
        echo "$HARBOR_URL harbor.local" | sudo tee -a /etc/hosts
        
        # Harbor認証情報デバッグ
        echo "Harbor認証情報確認中..."
        echo "Username: $HARBOR_USERNAME"
        echo "Password length: ${#HARBOR_PASSWORD}"
        echo "URL: $HARBOR_URL"
        
        # Docker daemon設定でinsecure registryを追加
        echo "Docker daemon insecure registry設定中..."
        sudo mkdir -p /etc/docker
        echo '{\"insecure-registries\":[\"$HARBOR_URL\"],\"registry-mirrors\":[]}' | sudo tee /etc/docker/daemon.json
        
        # Docker daemon設定確認
        echo "Docker daemon設定内容:"
        sudo cat /etc/docker/daemon.json
        
        # Docker daemon再起動（DinD環境では自動的に反映される）
        sleep 5
        
        # Harbor認証テスト (HTTP)
        echo "Harbor認証テスト中..."
        curl -k -u $HARBOR_USERNAME:$HARBOR_PASSWORD "http://$HARBOR_URL/api/v2.0/users/current" || echo "Harbor HTTP認証失敗"
        
        # Docker認証設定
        echo "Docker認証設定を更新中..."
        mkdir -p ~/.docker
        echo "{\"auths\":{\"$HARBOR_URL\":{\"auth\":\"$(echo -n \"$HARBOR_USERNAME:$HARBOR_PASSWORD\" | base64 -w 0)\"}},\"credHelpers\":{},\"insecure-registries\":[\"$HARBOR_URL\"]}" > ~/.docker/config.json
        chmod 600 ~/.docker/config.json
        
        # Docker環境変数でinsecure registryを指定（DinD環境対応）
        export DOCKER_CONTENT_TRUST=0
        
        echo "✅ Harbor Login & Docker設定完了"
        
    - name: Docker Build
      run: |
        echo "=== Docker Build ==="
        
        HARBOR_URL=$(cat /tmp/harbor_url)
        HARBOR_PROJECT=$(cat /tmp/harbor_project)
        
        # Dockerイメージビルド（HTTP接続用）
        docker build -t $HARBOR_URL/$HARBOR_PROJECT/slack.rs:latest .
        docker build -t $HARBOR_URL/$HARBOR_PROJECT/slack.rs:${{ github.sha }} .
        
        # HTTPプロトコル用追加タグ
        docker tag $HARBOR_URL/$HARBOR_PROJECT/slack.rs:latest $HARBOR_URL/$HARBOR_PROJECT/slack.rs:latest-http
        docker tag $HARBOR_URL/$HARBOR_PROJECT/slack.rs:${{ github.sha }} $HARBOR_URL/$HARBOR_PROJECT/slack.rs:${{ github.sha }}-http
        
        echo "✅ Docker Build完了"
        
    - name: Harbor Push
      run: |
        echo "=== Harbor Push ==="
        
        HARBOR_URL=$(cat /tmp/harbor_url)
        HARBOR_PROJECT=$(cat /tmp/harbor_project)
        HARBOR_USERNAME=$(cat /tmp/harbor_username)
        HARBOR_PASSWORD=$(cat /tmp/harbor_password)
        
        # Docker環境変数でinsecure registryを指定（DinD環境対応）
        export DOCKER_CONTENT_TRUST=0
        
        # Docker pushでHTTP接続を使用
        echo "Docker pushでHTTP接続を使用してHarborにpush中..."
        
        # Docker daemon設定確認
        echo "Docker daemon設定を確認中..."
        docker info | grep -i insecure || echo "Insecure registry設定なし"
        
        # Docker環境変数設定（追加）
        export DOCKER_HOST=unix:///var/run/docker.sock
        export DOCKER_API_VERSION=1.40
        export DOCKER_CONTENT_TRUST=0
        
        # Docker認証設定（config.jsonに直接書き込み）
        echo "Docker認証設定を更新中..."
        mkdir -p ~/.docker
        echo "{\"auths\":{\"$HARBOR_URL\":{\"auth\":\"$(echo -n \"$HARBOR_USERNAME:$HARBOR_PASSWORD\" | base64 -w 0)\"}},\"credHelpers\":{}}" > ~/.docker/config.json
        chmod 600 ~/.docker/config.json
        
        # Docker login実行（HTTP接続を強制）
        echo "Docker login実行中..."
        # HTTPS接続を無効化してHTTP接続を使用
        echo "$HARBOR_PASSWORD" | docker login http://$HARBOR_URL --username "$HARBOR_USERNAME" --password-stdin || echo "Docker login失敗、継続"
        
        # HTTPプロトコルを強制するためのデバッグ情報
        echo "Docker daemon insecure registries設定確認:"
        docker info | grep -A 5 "Insecure Registries" || echo "Insecure registries設定が見つかりません"
        
        # Docker pushを実行する前にHarborエンドポイントをテスト
        echo "Harbor HTTP エンドポイントをテスト中..."
        curl -s -I http://$HARBOR_URL/v2/ || echo "Harbor HTTP接続テスト失敗"
        
        # Harbor認証テスト（APIエンドポイント）
        echo "Harbor API認証テスト中..."
        curl -u $HARBOR_USERNAME:$HARBOR_PASSWORD "http://$HARBOR_URL/api/v2.0/users/current" || echo "Harbor API認証失敗"
        
        # Docker pushを実行（insecure registryとして）
        echo "Docker pushでHarborにpush中..."
        echo "insecure registry設定確認:"
        docker info | grep -A 5 "Insecure Registries" || echo "insecure registry設定なし"
        
        echo "推す対象: $HARBOR_URL/$HARBOR_PROJECT/slack.rs:latest"
        docker push $HARBOR_URL/$HARBOR_PROJECT/slack.rs:latest
        
        echo "推す対象: $HARBOR_URL/$HARBOR_PROJECT/slack.rs:${{ github.sha }}"
        docker push $HARBOR_URL/$HARBOR_PROJECT/slack.rs:${{ github.sha }}
        
        echo "✅ Docker pushが成功しました"
        
        echo "✅ Harbor Push完了"
        
    - name: プッシュ結果確認
      run: |
        echo "=== プッシュ結果確認 ==="
        
        HARBOR_USERNAME=$(cat /tmp/harbor_username)
        HARBOR_PASSWORD=$(cat /tmp/harbor_password)
        HARBOR_URL=$(cat /tmp/harbor_url)
        HARBOR_PROJECT=$(cat /tmp/harbor_project)
        
        # プッシュされたイメージ確認（HTTP接続）
        curl -u $HARBOR_USERNAME:$HARBOR_PASSWORD http://$HARBOR_URL/v2/$HARBOR_PROJECT/slack.rs/tags/list
        
        echo "✅ デプロイ完了"
        
    - name: クリーンアップ
      if: always()
      run: |
        echo "=== クリーンアップ ==="
        
        # 認証情報ファイルを安全に削除
        rm -f /tmp/harbor_* /tmp/kubeconfig /tmp/image-*.tar
        
        echo "✅ クリーンアップ完了"
