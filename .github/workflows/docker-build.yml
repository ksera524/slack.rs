apiVersion: apps/v1
kind: Deployment
metadata:
  name: slack
  namespace: sandbox
  labels:
    app: slack
spec:
  replicas: 1
  selector:
    matchLabels:
      app: slack
  template:
    metadata:
      labels:
        app: slack
    spec:
      restartPolicy: Always
      imagePullSecrets:
        - name: harbor-http
      containers:
      - name: slack
        image: 192.168.122.100/sandbox/slack.rs:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 3000
        workingDir: /app
        env:
        - name: SLACK_BOT_TOKEN
          valueFrom:
            secretKeyRef:
              name: slack3
              key: token
        - name: RUST_BACKTRACE
          value: "full"
        - name: RUST_LOG
          value: "debug"
        command: ["sh", "-c", "echo 'Starting slack with detailed error output...'; ls -la /app/slack; echo 'Environment variables:'; env | grep -E '(SLACK|RUST)'; echo 'Direct test execution:'; ./slack & SLACK_PID=$!; sleep 10; kill $SLACK_PID 2>/dev/null || echo 'Process already ended'; wait $SLACK_PID; echo \"Exit status: $?\"; echo 'Starting infinite loop...'; while true; do echo '=== Starting slack ==='; ./slack 2>&1; echo \"Slack exited with code: $?\"; sleep 3; done"]
        # GitHub Actionsでビルドしたイメージの即時終了対策
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - "pgrep -f slack || test -f /app/slack"
          initialDelaySeconds: 10
          periodSeconds: 30
        readinessProbe:
          tcpSocket:
            port: 3000
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3


---
apiVersion: v1
kind: Service
metadata:
  name: slack
  namespace: sandbox
spec:
  type: NodePort
  selector:
    app: slack
  ports:
    - protocol: TCP
      port: 3000
      targetPort: 3000
      nodePort: 32001
