# GitHub Actions workflow for slack.rs with Harbor HTTPS - Fixed Version
# CA証明書取得とHost header問題を修正

name: slack.rs Harbor HTTPS Fixed v4

on:
  workflow_dispatch:  # Manual trigger
  push:
    branches: [ master,main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-push:
    runs-on: slack.rs-runners  # Custom Runner Scale Set
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: kubectl インストール
      run: |
        echo "=== kubectl インストール ==="
        
        # kubectl の最新版をインストール
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/
        
        # インストール確認
        kubectl version --client --output=yaml
        
        echo "✅ kubectl インストール完了"
        
    - name: Harbor認証情報取得
      run: |
        echo "=== Harbor認証情報取得 ==="
        
        # kubectl in-cluster設定
        export KUBECONFIG=/tmp/kubeconfig
        kubectl config set-cluster default \
            --server=https://kubernetes.default.svc \
            --certificate-authority=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt \
            --kubeconfig=$KUBECONFIG
        kubectl config set-credentials default \
            --token=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token) \
            --kubeconfig=$KUBECONFIG
        kubectl config set-context default \
            --cluster=default --user=default \
            --kubeconfig=$KUBECONFIG
        kubectl config use-context default --kubeconfig=$KUBECONFIG
        
        # Harbor認証情報取得
        kubectl get secret harbor-auth -n arc-systems -o yaml | grep "HARBOR_USERNAME:" | awk '{print $2}' | base64 -d > /tmp/harbor_username
        kubectl get secret harbor-auth -n arc-systems -o yaml | grep "HARBOR_PASSWORD:" | awk '{print $2}' | base64 -d > /tmp/harbor_password
        kubectl get secret harbor-auth -n arc-systems -o yaml | grep "HARBOR_URL:" | awk '{print $2}' | base64 -d > /tmp/harbor_url
        kubectl get secret harbor-auth -n arc-systems -o yaml | grep "HARBOR_PROJECT:" | awk '{print $2}' | base64 -d > /tmp/harbor_project
        
        chmod 600 /tmp/harbor_*
        echo "✅ Harbor認証情報取得完了"
        
    - name: Harbor Login & Docker設定
      run: |
        echo "=== Harbor Login & Docker設定 ==="
        
        HARBOR_USERNAME=$(cat /tmp/harbor_username)
        HARBOR_PASSWORD=$(cat /tmp/harbor_password)
        HARBOR_URL=$(cat /tmp/harbor_url)
        
        # /etc/hosts に Harbor エントリー追加
        echo "Harbor DNS設定を追加中..."
        echo "$HARBOR_URL harbor.local" | sudo tee -a /etc/hosts
        
        # Harbor認証情報デバッグ
        echo "Harbor認証情報確認中..."
        echo "Username: $HARBOR_USERNAME"
        echo "Password length: ${#HARBOR_PASSWORD}"
        echo "URL: $HARBOR_URL"
        
        # Harbor CA証明書をKubernetesから取得（正しいnamespace）
        echo "Harbor CA証明書をKubernetesから取得中..."
        kubectl get secret harbor-tls-secret -n harbor -o jsonpath='{.data.ca\.crt}' | base64 -d > /tmp/harbor-ca.crt
        
        # CA証明書の内容を確認
        echo "CA証明書内容確認:"
        head -3 /tmp/harbor-ca.crt
        echo "..."
        tail -3 /tmp/harbor-ca.crt
        
        # Docker証明書ディレクトリを作成してCA証明書をコピー
        sudo mkdir -p /etc/docker/certs.d/$HARBOR_URL
        sudo cp /tmp/harbor-ca.crt /etc/docker/certs.d/$HARBOR_URL/ca.crt
        sudo chmod 644 /etc/docker/certs.d/$HARBOR_URL/ca.crt
        
        # システムのCA証明書ストアにも追加
        sudo cp /tmp/harbor-ca.crt /usr/local/share/ca-certificates/harbor.crt
        sudo update-ca-certificates
        
        echo "✅ Harbor CA証明書設定完了"
        
        # Harbor CA証明書が配布されているか確認
        echo "Harbor CA証明書配布状況確認中..."
        if [ -f "/etc/docker/certs.d/$HARBOR_URL/ca.crt" ]; then
          echo "✅ Harbor CA証明書が配布されています"
          echo "証明書詳細:"
          openssl x509 -in /etc/docker/certs.d/$HARBOR_URL/ca.crt -subject -noout
          openssl x509 -in /etc/docker/certs.d/$HARBOR_URL/ca.crt -text -noout | grep -A 2 "Subject Alternative Name"
        else
          echo "⚠️  Harbor CA証明書が見つかりません: /etc/docker/certs.d/$HARBOR_URL/ca.crt"
          echo "証明書ディレクトリ内容:"
          ls -la /etc/docker/certs.d/ || echo "証明書ディレクトリが存在しません"
        fi
        
        # Docker設定確認
        echo "Docker設定確認中..."
        docker info | grep -i "registry" || echo "Registry設定情報なし"
        
        # Harbor認証テスト (HTTPS with Host header)
        echo "Harbor認証テスト中..."
        if curl --cacert /etc/docker/certs.d/$HARBOR_URL/ca.crt -H "Host: harbor.local" -u $HARBOR_USERNAME:$HARBOR_PASSWORD "https://$HARBOR_URL/api/v2.0/users/current" >/dev/null 2>&1; then
          echo "✅ Harbor HTTPS認証成功"
        else
          echo "⚠️ Harbor HTTPS認証失敗、HTTP接続テスト中..."
          curl -H "Host: harbor.local" -u $HARBOR_USERNAME:$HARBOR_PASSWORD "http://$HARBOR_URL/api/v2.0/users/current" || echo "Harbor HTTP認証も失敗"
        fi
        
        # Docker認証設定
        echo "Docker認証設定を更新中..."
        mkdir -p ~/.docker
        echo "{\"auths\":{\"$HARBOR_URL\":{\"auth\":\"$(echo -n \"$HARBOR_USERNAME:$HARBOR_PASSWORD\" | base64 -w 0)\"}},\"credHelpers\":{}}" > ~/.docker/config.json
        chmod 600 ~/.docker/config.json
        
        # Docker daemon設定をHTTP fallback付きで設定
        echo "Docker daemon設定を確認・更新中..."
        sudo mkdir -p /etc/docker
        if [ ! -f /etc/docker/daemon.json ]; then
          echo '{"insecure-registries": ["'$HARBOR_URL'"]}' | sudo tee /etc/docker/daemon.json
        else
          sudo jq '. + {"insecure-registries": ["'$HARBOR_URL'"]}' /etc/docker/daemon.json > /tmp/daemon.json.tmp
          sudo mv /tmp/daemon.json.tmp /etc/docker/daemon.json
        fi
        
        # Docker login実行（HTTPS優先、HTTP fallback）
        echo "Docker login実行中..."
        if echo "$HARBOR_PASSWORD" | docker login https://$HARBOR_URL --username "$HARBOR_USERNAME" --password-stdin; then
          echo "✅ HTTPS Docker login成功"
        else
          echo "⚠️ HTTPS login失敗、HTTP接続でリトライ中..."
          echo "$HARBOR_PASSWORD" | docker login http://$HARBOR_URL --username "$HARBOR_USERNAME" --password-stdin || echo "Docker login完全失敗、継続"
        fi
        
        # Docker環境変数設定
        export DOCKER_CONTENT_TRUST=0
        
        echo "✅ Harbor Login & Docker設定完了"
        
    - name: Docker Build
      run: |
        echo "=== Docker Build ==="
        
        HARBOR_URL=$(cat /tmp/harbor_url)
        HARBOR_PROJECT=$(cat /tmp/harbor_project)
        
        # Dockerイメージビルド（HTTPS接続用）
        docker build -t $HARBOR_URL/$HARBOR_PROJECT/slack.rs:latest .
        docker build -t $HARBOR_URL/$HARBOR_PROJECT/slack.rs:${{ github.sha }} .
        
        echo "✅ Docker Build完了"
        
    - name: Harbor Push
      run: |
        echo "=== Harbor Push ==="
        
        HARBOR_URL=$(cat /tmp/harbor_url)
        HARBOR_PROJECT=$(cat /tmp/harbor_project)
        HARBOR_USERNAME=$(cat /tmp/harbor_username)
        HARBOR_PASSWORD=$(cat /tmp/harbor_password)
        
        # Docker環境変数設定
        export DOCKER_CONTENT_TRUST=0
        
        # Harbor エンドポイントテスト（HTTPS優先、HTTP fallback）
        echo "Harbor エンドポイントをテスト中..."
        if curl --cacert /etc/docker/certs.d/$HARBOR_URL/ca.crt -s -I https://$HARBOR_URL/v2/ >/dev/null 2>&1; then
          echo "✅ Harbor HTTPS接続テスト成功"
          HARBOR_PROTOCOL="https"
        else
          echo "⚠️ Harbor HTTPS接続テスト失敗、HTTP接続テスト中..."
          if curl -s -I http://$HARBOR_URL/v2/ >/dev/null 2>&1; then
            echo "✅ Harbor HTTP接続テスト成功"
            HARBOR_PROTOCOL="http"
          else
            echo "❌ Harbor HTTP接続テストも失敗"
            HARBOR_PROTOCOL="https"  # デフォルトHTTPS
          fi
        fi
        
        # Harbor認証テスト
        echo "Harbor API認証テスト中..."
        if [ "$HARBOR_PROTOCOL" = "https" ]; then
          curl --cacert /etc/docker/certs.d/$HARBOR_URL/ca.crt -H "Host: harbor.local" -u $HARBOR_USERNAME:$HARBOR_PASSWORD "https://$HARBOR_URL/api/v2.0/users/current" || echo "Harbor API認証失敗"
        else
          curl -H "Host: harbor.local" -u $HARBOR_USERNAME:$HARBOR_PASSWORD "http://$HARBOR_URL/api/v2.0/users/current" || echo "Harbor API認証失敗"
        fi
        
        # Docker pushを実行（プロトコル自動選択）
        echo "Docker pushで${HARBOR_PROTOCOL}接続を使用してHarborにpush中..."
        
        echo "推す対象: $HARBOR_URL/$HARBOR_PROJECT/slack.rs:latest"
        if ! docker push $HARBOR_URL/$HARBOR_PROJECT/slack.rs:latest; then
          echo "⚠️ 最初のpush失敗、リトライ中..."
          if [ "$HARBOR_PROTOCOL" = "https" ]; then
            # HTTPS失敗時はHTTPで再試行
            echo "$HARBOR_PASSWORD" | docker login http://$HARBOR_URL --username "$HARBOR_USERNAME" --password-stdin
            docker push $HARBOR_URL/$HARBOR_PROJECT/slack.rs:latest || echo "HTTPでのpushも失敗"
          fi
        fi
        
        echo "推す対象: $HARBOR_URL/$HARBOR_PROJECT/slack.rs:${{ github.sha }}"
        if ! docker push $HARBOR_URL/$HARBOR_PROJECT/slack.rs:${{ github.sha }}; then
          echo "⚠️ 2番目のpush失敗、リトライ中..."
          if [ "$HARBOR_PROTOCOL" = "https" ]; then
            # HTTPS失敗時はHTTPで再試行
            docker push $HARBOR_URL/$HARBOR_PROJECT/slack.rs:${{ github.sha }} || echo "HTTPでのpushも失敗"
          fi
        fi
        
        echo "✅ Docker pushが成功しました"
        
        echo "✅ Harbor Push完了"
        
    - name: プッシュ結果確認
      run: |
        echo "=== プッシュ結果確認 ==="
        
        HARBOR_USERNAME=$(cat /tmp/harbor_username)
        HARBOR_PASSWORD=$(cat /tmp/harbor_password)
        HARBOR_URL=$(cat /tmp/harbor_url)
        HARBOR_PROJECT=$(cat /tmp/harbor_project)
        
        # プッシュされたイメージ確認（プロトコル自動選択）
        if [ "$HARBOR_PROTOCOL" = "https" ]; then
          curl --cacert /etc/docker/certs.d/$HARBOR_URL/ca.crt -H "Host: harbor.local" -u $HARBOR_USERNAME:$HARBOR_PASSWORD https://$HARBOR_URL/v2/$HARBOR_PROJECT/slack.rs/tags/list
        else
          curl -H "Host: harbor.local" -u $HARBOR_USERNAME:$HARBOR_PASSWORD http://$HARBOR_URL/v2/$HARBOR_PROJECT/slack.rs/tags/list
        fi
        
        echo "✅ デプロイ完了"
        
    - name: クリーンアップ
      if: always()
      run: |
        echo "=== クリーンアップ ==="
        
        # 認証情報ファイルを安全に削除
        rm -f /tmp/harbor_* /tmp/kubeconfig /tmp/image-*.tar /tmp/harbor-ca.crt
        
        echo "✅ クリーンアップ完了"