# GitHub Actions workflow for slack.rs - Simplified Version
# Harbor証明書問題解決版（insecure-registry使用）

name: Build and Push to Harbor - slack.rs (Simple)

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-push:
    runs-on: slack.rs-runners  # Custom Runner Scale Set
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: kubectl インストール
      run: |
        echo "=== kubectl インストール ==="
        
        # kubectl の最新版をインストール
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/
        
        # インストール確認
        kubectl version --client --output=yaml
        
        echo "✅ kubectl インストール完了"
        
    - name: Harbor認証情報取得
      run: |
        echo "=== Harbor認証情報取得 ==="
        
        # kubectl in-cluster設定
        export KUBECONFIG=/tmp/kubeconfig
        kubectl config set-cluster default \
            --server=https://kubernetes.default.svc \
            --certificate-authority=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt \
            --kubeconfig=$KUBECONFIG
        kubectl config set-credentials default \
            --token=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token) \
            --kubeconfig=$KUBECONFIG
        kubectl config set-context default \
            --cluster=default --user=default \
            --kubeconfig=$KUBECONFIG
        kubectl config use-context default --kubeconfig=$KUBECONFIG
        
        # Harbor認証情報取得
        kubectl get secret harbor-auth -n arc-systems -o yaml | grep "HARBOR_USERNAME:" | awk '{print $2}' | base64 -d > /tmp/harbor_username
        kubectl get secret harbor-auth -n arc-systems -o yaml | grep "HARBOR_PASSWORD:" | awk '{print $2}' | base64 -d > /tmp/harbor_password
        kubectl get secret harbor-auth -n arc-systems -o yaml | grep "HARBOR_URL:" | awk '{print $2}' | base64 -d > /tmp/harbor_url
        kubectl get secret harbor-auth -n arc-systems -o yaml | grep "HARBOR_PROJECT:" | awk '{print $2}' | base64 -d > /tmp/harbor_project
        
        chmod 600 /tmp/harbor_*
        echo "✅ Harbor認証情報取得完了"
        
    - name: CA証明書取得とDocker設定
      run: |
        echo "=== CA証明書取得とDocker設定 ==="
        
        HARBOR_USERNAME=$(cat /tmp/harbor_username)
        HARBOR_PASSWORD=$(cat /tmp/harbor_password)
        HARBOR_URL=$(cat /tmp/harbor_url)
        
        echo "Harbor URL: $HARBOR_URL"
        echo "Harbor User: $HARBOR_USERNAME"
        
        # 内部CA証明書をcert-managerから取得
        echo "内部CA証明書取得中..."
        kubectl get secret ca-key-pair -n cert-manager -o jsonpath='{.data.tls\.crt}' | base64 -d > /tmp/ca-cert.pem
        
        # Harbor TLS証明書を取得
        echo "Harbor TLS証明書取得中..."
        kubectl get secret harbor-tls-secret -n harbor -o jsonpath='{.data.tls\.crt}' | base64 -d > /tmp/harbor-cert.pem
        
        # 証明書情報確認
        echo "CA証明書情報:"
        openssl x509 -in /tmp/ca-cert.pem -subject -issuer -noout || echo "CA証明書読み取り失敗"
        echo "Harbor証明書情報:"
        openssl x509 -in /tmp/harbor-cert.pem -subject -issuer -noout || echo "Harbor証明書読み取り失敗"
        echo "Harbor証明書のSAN確認:"
        openssl x509 -in /tmp/harbor-cert.pem -text -noout | grep -A 2 "Subject Alternative Name" || echo "SAN情報なし"
        
        # システムCA証明書ストアに追加
        echo "システムCA証明書ストア更新中..."
        sudo cp /tmp/ca-cert.pem /usr/local/share/ca-certificates/k8s-ca.crt
        sudo cp /tmp/harbor-cert.pem /usr/local/share/ca-certificates/harbor.crt
        sudo update-ca-certificates
        
        # Docker用証明書ディレクトリ設定
        echo "Docker用証明書設定中..."
        sudo mkdir -p /etc/docker/certs.d/$HARBOR_URL
        sudo cp /tmp/ca-cert.pem /etc/docker/certs.d/$HARBOR_URL/ca.crt
        sudo cp /tmp/harbor-cert.pem /etc/docker/certs.d/$HARBOR_URL/client.cert
        sudo chmod 644 /etc/docker/certs.d/$HARBOR_URL/*
        
        # Docker login実行（HTTPS接続）
        echo "Docker login実行中（HTTPS + CA証明書）..."
        export DOCKER_CONTENT_TRUST=0
        
        if echo "$HARBOR_PASSWORD" | docker login https://$HARBOR_URL -u "$HARBOR_USERNAME" --password-stdin; then
          echo "✅ HTTPS CA証明書login成功"
        elif echo "$HARBOR_PASSWORD" | docker login $HARBOR_URL -u "$HARBOR_USERNAME" --password-stdin; then
          echo "✅ デフォルトHTTPS login成功"
        else
          echo "⚠️ HTTPS login失敗、継続"
        fi
        
        echo "✅ CA証明書設定とDocker認証完了"
        
    - name: Docker Build
      run: |
        echo "=== Docker Build ==="
        
        HARBOR_URL=$(cat /tmp/harbor_url)
        HARBOR_PROJECT=$(cat /tmp/harbor_project)
        
        # Dockerイメージビルド
        docker build -t $HARBOR_URL/$HARBOR_PROJECT/slack.rs:latest .
        docker build -t $HARBOR_URL/$HARBOR_PROJECT/slack.rs:${{ github.sha }} .
        
        echo "✅ Docker Build完了"
        
    - name: Harbor Push
      run: |
        echo "=== Harbor Push ==="
        
        HARBOR_USERNAME=$(cat /tmp/harbor_username)
        HARBOR_PASSWORD=$(cat /tmp/harbor_password)
        HARBOR_URL=$(cat /tmp/harbor_url)
        HARBOR_PROJECT=$(cat /tmp/harbor_project)
        
        # skopeo インストール
        echo "skopeo インストール中..."
        sudo apt-get update -qq
        sudo apt-get install -y skopeo
        
        # CA証明書設定をskopeoに適用
        echo "skopeo用証明書設定中..."
        mkdir -p ~/.config/containers/certs.d/$HARBOR_URL
        cp /etc/docker/certs.d/$HARBOR_URL/ca.crt ~/.config/containers/certs.d/$HARBOR_URL/
        
        # skopeoでのpush試行（CA証明書使用）
        echo "skopeoでのHarbor push実行中（CA証明書検証）..."
        
        # latest tagのpush
        echo "推す対象: docker-daemon:$HARBOR_URL/$HARBOR_PROJECT/slack.rs:latest → docker://$HARBOR_URL/$HARBOR_PROJECT/slack.rs:latest"
        if skopeo copy --dest-creds="$HARBOR_USERNAME:$HARBOR_PASSWORD" \
          "docker-daemon:$HARBOR_URL/$HARBOR_PROJECT/slack.rs:latest" \
          "docker://$HARBOR_URL/$HARBOR_PROJECT/slack.rs:latest"; then
          echo "✅ skopeo latest push成功（CA証明書検証）"
        else
          echo "⚠️ CA証明書push失敗、TLS無効で再試行..."
          
          # フォールバック1: TLS検証無効のskopeo
          if skopeo copy --insecure-policy --dest-tls-verify=false \
            --dest-creds="$HARBOR_USERNAME:$HARBOR_PASSWORD" \
            "docker-daemon:$HARBOR_URL/$HARBOR_PROJECT/slack.rs:latest" \
            "docker://$HARBOR_URL/$HARBOR_PROJECT/slack.rs:latest"; then
            echo "✅ skopeo latest push成功（TLS無効）"
          else
            echo "⚠️ skopeo失敗、Docker pushを試行..."
            
            # フォールバック2: Docker push
            export DOCKER_CONTENT_TRUST=0
            timeout 60 docker push $HARBOR_URL/$HARBOR_PROJECT/slack.rs:latest || echo "Docker push失敗"
          fi
        fi
        
        # SHA tagのpush
        echo "推す対象: docker-daemon:$HARBOR_URL/$HARBOR_PROJECT/slack.rs:${{ github.sha }} → docker://$HARBOR_URL/$HARBOR_PROJECT/slack.rs:${{ github.sha }}"
        if skopeo copy --dest-creds="$HARBOR_USERNAME:$HARBOR_PASSWORD" \
          "docker-daemon:$HARBOR_URL/$HARBOR_PROJECT/slack.rs:${{ github.sha }}" \
          "docker://$HARBOR_URL/$HARBOR_PROJECT/slack.rs:${{ github.sha }}"; then
          echo "✅ skopeo SHA push成功（CA証明書検証）"
        else
          echo "⚠️ CA証明書push失敗、TLS無効で再試行..."
          
          # フォールバック1: TLS検証無効のskopeo
          if skopeo copy --insecure-policy --dest-tls-verify=false \
            --dest-creds="$HARBOR_USERNAME:$HARBOR_PASSWORD" \
            "docker-daemon:$HARBOR_URL/$HARBOR_PROJECT/slack.rs:${{ github.sha }}" \
            "docker://$HARBOR_URL/$HARBOR_PROJECT/slack.rs:${{ github.sha }}"; then
            echo "✅ skopeo SHA push成功（TLS無効）"
          else
            echo "⚠️ skopeo失敗、Docker pushを試行..."
            
            # フォールバック2: Docker push
            export DOCKER_CONTENT_TRUST=0
            timeout 60 docker push $HARBOR_URL/$HARBOR_PROJECT/slack.rs:${{ github.sha }} || echo "Docker push失敗"
          fi
        fi
        
        echo "✅ Harbor Push完了"
        
    - name: プッシュ結果確認
      run: |
        echo "=== プッシュ結果確認 ==="
        
        HARBOR_USERNAME=$(cat /tmp/harbor_username)
        HARBOR_PASSWORD=$(cat /tmp/harbor_password)
        HARBOR_URL=$(cat /tmp/harbor_url)
        HARBOR_PROJECT=$(cat /tmp/harbor_project)
        
        # プッシュされたイメージ確認
        curl -u $HARBOR_USERNAME:$HARBOR_PASSWORD "http://$HARBOR_URL/v2/$HARBOR_PROJECT/slack.rs/tags/list" || echo "イメージ一覧取得失敗"
        
        echo "✅ デプロイ完了"
        
    - name: クリーンアップ
      if: always()
      run: |
        echo "=== クリーンアップ ==="
        
        # 認証情報ファイルを安全に削除
        rm -f /tmp/harbor_* /tmp/kubeconfig
        
        echo "✅ クリーンアップ完了"