# GitHub Actions workflow for slack.rs - Simplified Version
# Harbor証明書問題解決版（insecure-registry使用）

name: Build and Push to Harbor - slack.rs (Simple)

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-push:
    runs-on: slack.rs-runners  # Custom Runner Scale Set
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: kubectl インストール
      run: |
        echo "=== kubectl インストール ==="
        
        # kubectl の最新版をインストール
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/
        
        # インストール確認
        kubectl version --client --output=yaml
        
        echo "✅ kubectl インストール完了"
        
    - name: Harbor認証情報取得
      run: |
        echo "=== Harbor認証情報取得 ==="
        
        # kubectl in-cluster設定
        export KUBECONFIG=/tmp/kubeconfig
        kubectl config set-cluster default \
            --server=https://kubernetes.default.svc \
            --certificate-authority=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt \
            --kubeconfig=$KUBECONFIG
        kubectl config set-credentials default \
            --token=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token) \
            --kubeconfig=$KUBECONFIG
        kubectl config set-context default \
            --cluster=default --user=default \
            --kubeconfig=$KUBECONFIG
        kubectl config use-context default --kubeconfig=$KUBECONFIG
        
        # Harbor認証情報取得
        kubectl get secret harbor-auth -n arc-systems -o yaml | grep "HARBOR_USERNAME:" | awk '{print $2}' | base64 -d > /tmp/harbor_username
        kubectl get secret harbor-auth -n arc-systems -o yaml | grep "HARBOR_PASSWORD:" | awk '{print $2}' | base64 -d > /tmp/harbor_password
        kubectl get secret harbor-auth -n arc-systems -o yaml | grep "HARBOR_URL:" | awk '{print $2}' | base64 -d > /tmp/harbor_url
        kubectl get secret harbor-auth -n arc-systems -o yaml | grep "HARBOR_PROJECT:" | awk '{print $2}' | base64 -d > /tmp/harbor_project
        
        chmod 600 /tmp/harbor_*
        echo "✅ Harbor認証情報取得完了"
        
    - name: Docker認証設定
      run: |
        echo "=== Docker認証設定 ==="
        
        HARBOR_USERNAME=$(cat /tmp/harbor_username)
        HARBOR_PASSWORD=$(cat /tmp/harbor_password)
        HARBOR_URL=$(cat /tmp/harbor_url)
        
        echo "Harbor URL: $HARBOR_URL"
        echo "Harbor User: $HARBOR_USERNAME"
        
        # Docker daemon PID確認・再起動試行
        echo "Docker daemon状況確認中..."
        ps aux | grep dockerd || echo "dockerd プロセス不明"
        
        # insecure registry設定 (runtime)
        echo "Docker daemon設定更新中..."
        sudo mkdir -p /etc/docker
        echo "{\"insecure-registries\":[\"$HARBOR_URL\"], \"hosts\": [\"fd://\", \"tcp://0.0.0.0:2376\"], \"tls\": false}" | sudo tee /etc/docker/daemon.json
        
        # Docker daemon再起動（signal使用）
        echo "Docker daemon再起動試行中..."
        sudo pkill -SIGHUP dockerd || echo "dockerd signal送信失敗"
        sleep 5
        
        # Docker login実行
        echo "Docker login実行中..."
        export DOCKER_TLS_VERIFY=""
        export DOCKER_CERT_PATH=""
        export DOCKER_CONTENT_TRUST=0
        
        # 複数パターンでの認証試行
        if echo "$HARBOR_PASSWORD" | docker login http://$HARBOR_URL -u "$HARBOR_USERNAME" --password-stdin 2>/dev/null; then
          echo "✅ HTTP login成功"
        elif echo "$HARBOR_PASSWORD" | DOCKER_TLS_VERIFY=0 docker login $HARBOR_URL -u "$HARBOR_USERNAME" --password-stdin 2>/dev/null; then
          echo "✅ TLS無効login成功"
        else
          echo "⚠️ 両方のログイン方法が失敗、継続"
        fi
        
        echo "✅ Docker認証設定完了"
        
    - name: Docker Build
      run: |
        echo "=== Docker Build ==="
        
        HARBOR_URL=$(cat /tmp/harbor_url)
        HARBOR_PROJECT=$(cat /tmp/harbor_project)
        
        # Dockerイメージビルド
        docker build -t $HARBOR_URL/$HARBOR_PROJECT/slack.rs:latest .
        docker build -t $HARBOR_URL/$HARBOR_PROJECT/slack.rs:${{ github.sha }} .
        
        echo "✅ Docker Build完了"
        
    - name: Harbor Push
      run: |
        echo "=== Harbor Push ==="
        
        HARBOR_USERNAME=$(cat /tmp/harbor_username)
        HARBOR_PASSWORD=$(cat /tmp/harbor_password)
        HARBOR_URL=$(cat /tmp/harbor_url)
        HARBOR_PROJECT=$(cat /tmp/harbor_project)
        
        # skopeo インストール
        echo "skopeo インストール中..."
        sudo apt-get update -qq
        sudo apt-get install -y skopeo
        
        # skopeoでのpush試行（TLS検証無効）
        echo "skopeoでのHarbor push実行中..."
        
        # latest tagのpush
        echo "推す対象: docker-daemon:$HARBOR_URL/$HARBOR_PROJECT/slack.rs:latest → docker://$HARBOR_URL/$HARBOR_PROJECT/slack.rs:latest"
        if skopeo copy --insecure-policy --dest-tls-verify=false \
          --dest-creds="$HARBOR_USERNAME:$HARBOR_PASSWORD" \
          "docker-daemon:$HARBOR_URL/$HARBOR_PROJECT/slack.rs:latest" \
          "docker://$HARBOR_URL/$HARBOR_PROJECT/slack.rs:latest"; then
          echo "✅ skopeo latest push成功"
        else
          echo "⚠️ skopeo latest push失敗、Docker pushを試行..."
          
          # フォールバック: Docker push
          export DOCKER_TLS_VERIFY=""
          export DOCKER_CONTENT_TRUST=0
          timeout 60 docker push $HARBOR_URL/$HARBOR_PROJECT/slack.rs:latest || echo "Docker push失敗"
        fi
        
        # SHA tagのpush
        echo "推す対象: docker-daemon:$HARBOR_URL/$HARBOR_PROJECT/slack.rs:${{ github.sha }} → docker://$HARBOR_URL/$HARBOR_PROJECT/slack.rs:${{ github.sha }}"
        if skopeo copy --insecure-policy --dest-tls-verify=false \
          --dest-creds="$HARBOR_USERNAME:$HARBOR_PASSWORD" \
          "docker-daemon:$HARBOR_URL/$HARBOR_PROJECT/slack.rs:${{ github.sha }}" \
          "docker://$HARBOR_URL/$HARBOR_PROJECT/slack.rs:${{ github.sha }}"; then
          echo "✅ skopeo SHA push成功"
        else
          echo "⚠️ skopeo SHA push失敗、Docker pushを試行..."
          
          # フォールバック: Docker push
          export DOCKER_TLS_VERIFY=""
          export DOCKER_CONTENT_TRUST=0
          timeout 60 docker push $HARBOR_URL/$HARBOR_PROJECT/slack.rs:${{ github.sha }} || echo "Docker push失敗"
        fi
        
        echo "✅ Harbor Push完了"
        
    - name: プッシュ結果確認
      run: |
        echo "=== プッシュ結果確認 ==="
        
        HARBOR_USERNAME=$(cat /tmp/harbor_username)
        HARBOR_PASSWORD=$(cat /tmp/harbor_password)
        HARBOR_URL=$(cat /tmp/harbor_url)
        HARBOR_PROJECT=$(cat /tmp/harbor_project)
        
        # プッシュされたイメージ確認
        curl -u $HARBOR_USERNAME:$HARBOR_PASSWORD "http://$HARBOR_URL/v2/$HARBOR_PROJECT/slack.rs/tags/list" || echo "イメージ一覧取得失敗"
        
        echo "✅ デプロイ完了"
        
    - name: クリーンアップ
      if: always()
      run: |
        echo "=== クリーンアップ ==="
        
        # 認証情報ファイルを安全に削除
        rm -f /tmp/harbor_* /tmp/kubeconfig
        
        echo "✅ クリーンアップ完了"