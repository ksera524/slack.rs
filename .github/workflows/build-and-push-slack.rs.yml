# GitHub Actions workflow for slack.rs
# Auto-generated by add-runner.sh (公式ARC対応版)

name: Build and Push to Harbor - slack.rs

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-push:
    runs-on: slack-rs-runners  # Kubernetes Runner
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup kubectl and Harbor credentials
      run: |
        echo "=== Setup kubectl and Harbor credentials ==="
        
        # Install kubectl
        echo "Installing kubectl..."
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/
        
        # Configure kubectl for in-cluster access
        echo "Configuring kubectl..."
        export KUBECONFIG=/tmp/kubeconfig
        kubectl config set-cluster default \
            --server=https://kubernetes.default.svc \
            --certificate-authority=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt \
            --kubeconfig=$KUBECONFIG
        kubectl config set-credentials default \
            --token=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token) \
            --kubeconfig=$KUBECONFIG
        kubectl config set-context default \
            --cluster=default --user=default \
            --kubeconfig=$KUBECONFIG
        kubectl config use-context default --kubeconfig=$KUBECONFIG
        
        # Get Harbor credentials
        echo "Getting Harbor credentials..."
        kubectl get secret harbor-auth -n arc-systems -o jsonpath='{.data.HARBOR_USERNAME}' | base64 -d > /tmp/harbor_username
        kubectl get secret harbor-auth -n arc-systems -o jsonpath='{.data.HARBOR_PASSWORD}' | base64 -d > /tmp/harbor_password
        kubectl get secret harbor-auth -n arc-systems -o jsonpath='{.data.HARBOR_URL}' | base64 -d > /tmp/harbor_url
        kubectl get secret harbor-auth -n arc-systems -o jsonpath='{.data.HARBOR_PROJECT}' | base64 -d > /tmp/harbor_project
        
        chmod 600 /tmp/harbor_*
        echo "✅ Harbor credentials retrieved successfully"
        
    - name: Build and push images using skopeo
      run: |
        echo "=== Build and push images using skopeo ==="
        
        HARBOR_USERNAME=$(cat /tmp/harbor_username)
        HARBOR_PASSWORD=$(cat /tmp/harbor_password)
        HARBOR_URL=$(cat /tmp/harbor_url)
        HARBOR_PROJECT=$(cat /tmp/harbor_project)
        
        # Install skopeo
        echo "Installing skopeo..."
        sudo apt-get update && sudo apt-get install -y skopeo
        
        # Build Docker images
        echo "Building Docker images..."
        docker build -t slack.rs:latest .
        docker build -t slack.rs:${{ github.sha }} .
        
        # Push using skopeo - エラー修正: ポート番号を明示的に指定
        echo "Pushing to Harbor using skopeo..."
        docker save slack.rs:latest > /tmp/slack.rs-latest.tar
        docker save slack.rs:${{ github.sha }} > /tmp/slack.rs-sha.tar
        
        # /etc/hostsにharbor.localを追加
        echo "192.168.122.100 harbor.local" | sudo tee -a /etc/hosts
        
        # Harborのポートを明示的に指定
        skopeo copy --insecure-policy --dest-tls-verify=false \
          --dest-creds="$HARBOR_USERNAME:$HARBOR_PASSWORD" \
          docker-archive:/tmp/slack.rs-latest.tar \
          docker://harbor.local:80/$HARBOR_PROJECT/slack.rs:latest
        
        skopeo copy --insecure-policy --dest-tls-verify=false \
          --dest-creds="$HARBOR_USERNAME:$HARBOR_PASSWORD" \
          docker-archive:/tmp/slack.rs-sha.tar \
          docker://harbor.local:80/$HARBOR_PROJECT/slack.rs:${{ github.sha }}
        
        echo "✅ Images pushed successfully to Harbor"
        
    - name: Cleanup
      if: always()
      run: |
        echo "=== Cleanup ==="
        rm -f /tmp/harbor_* /tmp/kubeconfig /tmp/slack.rs-*.tar
        echo "✅ Cleanup completed"
