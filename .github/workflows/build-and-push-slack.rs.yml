# GitHub Actions workflow for slack.rs
# Final approach: Skip TLS verification for Harbor access

name: Final Harbor Push Solution - slack.rs

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-push:
    runs-on: [self-hosted, linux, k8s, slack-rs]  # Custom Runner 
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup kubectl and Harbor credentials
      run: |
        echo "=== Setup kubectl and Harbor credentials ==="
        
        # Install kubectl
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/
        
        # Configure kubectl for in-cluster access
        export KUBECONFIG=/tmp/kubeconfig
        kubectl config set-cluster default \
            --server=https://kubernetes.default.svc \
            --certificate-authority=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt \
            --kubeconfig=$KUBECONFIG
        kubectl config set-credentials default \
            --token=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token) \
            --kubeconfig=$KUBECONFIG
        kubectl config set-context default \
            --cluster=default --user=default \
            --kubeconfig=$KUBECONFIG
        kubectl config use-context default --kubeconfig=$KUBECONFIG
        
        # Get Harbor credentials
        kubectl get secret harbor-auth -n arc-systems -o yaml | grep "HARBOR_USERNAME:" | awk '{print $2}' | base64 -d > /tmp/harbor_username
        kubectl get secret harbor-auth -n arc-systems -o yaml | grep "HARBOR_PASSWORD:" | awk '{print $2}' | base64 -d > /tmp/harbor_password
        kubectl get secret harbor-auth -n arc-systems -o yaml | grep "HARBOR_URL:" | awk '{print $2}' | base64 -d > /tmp/harbor_url
        kubectl get secret harbor-auth -n arc-systems -o yaml | grep "HARBOR_PROJECT:" | awk '{print $2}' | base64 -d > /tmp/harbor_project
        
        chmod 600 /tmp/harbor_*
        echo "✅ Harbor credentials retrieved successfully"
        
    - name: Alternative approach - Use skopeo for Harbor push
      run: |
        echo "=== Alternative approach - Use skopeo for Harbor push ==="
        
        HARBOR_USERNAME=$(cat /tmp/harbor_username)
        HARBOR_PASSWORD=$(cat /tmp/harbor_password)
        HARBOR_URL=$(cat /tmp/harbor_url)
        HARBOR_PROJECT=$(cat /tmp/harbor_project)
        
        # Install skopeo for Docker registry operations with TLS skip
        sudo apt-get update && sudo apt-get install -y skopeo
        
        # Build Docker images locally
        echo "Building Docker images..."
        docker build -t local-slack-rs:latest .
        docker build -t local-slack-rs:${{ github.sha }} .
        
        # Push using skopeo with TLS skip
        echo "Pushing to Harbor using skopeo with TLS skip..."
        
        # Push using skopeo with intermediate files (avoid pipe issues)
        docker save local-slack-rs:latest -o /tmp/slack-rs-latest.tar
        skopeo copy --dest-tls-verify=false --dest-creds="$HARBOR_USERNAME:$HARBOR_PASSWORD" docker-archive:/tmp/slack-rs-latest.tar docker://$HARBOR_URL/$HARBOR_PROJECT/slack.rs:latest
        
        docker save local-slack-rs:${{ github.sha }} -o /tmp/slack-rs-sha.tar
        skopeo copy --dest-tls-verify=false --dest-creds="$HARBOR_USERNAME:$HARBOR_PASSWORD" docker-archive:/tmp/slack-rs-sha.tar docker://$HARBOR_URL/$HARBOR_PROJECT/slack.rs:${{ github.sha }}
        
        echo "✅ Images pushed successfully to Harbor using skopeo"
        
    - name: Verify Harbor repository
      run: |
        echo "=== Verify Harbor repository ==="
        
        HARBOR_USERNAME=$(cat /tmp/harbor_username)
        HARBOR_PASSWORD=$(cat /tmp/harbor_password)
        HARBOR_URL=$(cat /tmp/harbor_url)
        HARBOR_PROJECT=$(cat /tmp/harbor_project)
        
        # Verify pushed images via Harbor API (skip TLS verification)
        if curl -k -f -u "$HARBOR_USERNAME:$HARBOR_PASSWORD" "https://$HARBOR_URL/v2/$HARBOR_PROJECT/slack.rs/tags/list"; then
          echo "✅ Harbor repository verified successfully"
        else
          echo "⚠️  Harbor API verification failed (images may still be available)"
        fi
        
        echo "✅ Deployment completed"
        
    - name: Cleanup
      if: always()
      run: |
        echo "=== Cleanup ==="
        
        # Remove sensitive credential files and temporary tar files
        rm -f /tmp/harbor_* /tmp/kubeconfig /tmp/slack-rs-*.tar
        
        echo "✅ Cleanup completed"
