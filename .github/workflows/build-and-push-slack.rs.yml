# GitHub Actions workflow for slack.rs
# Auto-generated by add-runner.sh (公式ARC対応版)

name: Build and Push to Harbor - slack.rs

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-push:
    runs-on: slack.rs-runners  # 新しいRunnerScaleSet
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup kubectl and Harbor credentials
      run: |
        set -x  # デバッグモード有効化
        echo "=== Setup kubectl and Harbor credentials ==="
        
        # Install kubectl
        echo "Installing kubectl..."
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/
        
        # Configure kubectl for in-cluster access
        echo "Configuring kubectl..."
        export KUBECONFIG=/tmp/kubeconfig
        kubectl config set-cluster default \
            --server=https://kubernetes.default.svc \
            --certificate-authority=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt \
            --kubeconfig=$KUBECONFIG
        kubectl config set-credentials default \
            --token=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token) \
            --kubeconfig=$KUBECONFIG
        kubectl config set-context default \
            --cluster=default --user=default \
            --kubeconfig=$KUBECONFIG
        kubectl config use-context default --kubeconfig=$KUBECONFIG
        
        # Test kubectl connectivity
        echo "Testing kubectl connectivity..."
        kubectl get namespaces || echo "kubectl get namespaces failed"
        kubectl auth can-i get secrets -n arc-systems || echo "No kubectl secret permission"
        
        # List available secrets
        echo "Available secrets in arc-systems:"
        kubectl get secrets -n arc-systems || echo "Failed to list secrets"
        
        # Get Harbor credentials with proper JSON parsing
        echo "Getting Harbor credentials..."
        if kubectl get secret harbor-auth -n arc-systems >/dev/null 2>&1; then
            echo "harbor-auth secret exists"
            kubectl get secret harbor-auth -n arc-systems -o jsonpath='{.data.HARBOR_USERNAME}' | base64 -d > /tmp/harbor_username || echo "Failed to get HARBOR_USERNAME"
            kubectl get secret harbor-auth -n arc-systems -o jsonpath='{.data.HARBOR_PASSWORD}' | base64 -d > /tmp/harbor_password || echo "Failed to get HARBOR_PASSWORD"
            kubectl get secret harbor-auth -n arc-systems -o jsonpath='{.data.HARBOR_URL}' | base64 -d > /tmp/harbor_url || echo "Failed to get HARBOR_URL"
            kubectl get secret harbor-auth -n arc-systems -o jsonpath='{.data.HARBOR_PROJECT}' | base64 -d > /tmp/harbor_project || echo "Failed to get HARBOR_PROJECT"
        else
            echo "harbor-auth secret does NOT exist"
            exit 1
        fi
        
        # Debug file contents
        echo "harbor_username file content: $(cat /tmp/harbor_username 2>/dev/null || echo 'empty')"
        echo "harbor_url file content: $(cat /tmp/harbor_url 2>/dev/null || echo 'empty')"
        
        chmod 600 /tmp/harbor_* 2>/dev/null || echo "Failed to chmod harbor files"
        echo "✅ Harbor credentials retrieved successfully"
        
    - name: Build and push images using skopeo
      run: |
        echo "=== Build and push images using skopeo ==="
        
        HARBOR_USERNAME=$(cat /tmp/harbor_username)
        HARBOR_PASSWORD=$(cat /tmp/harbor_password)
        HARBOR_URL=$(cat /tmp/harbor_url)
        HARBOR_PROJECT=$(cat /tmp/harbor_project)
        
        # Debug Harbor credentials (without showing sensitive data)
        echo "Harbor URL: '$HARBOR_URL'"
        echo "Harbor Project: '$HARBOR_PROJECT'"
        echo "Harbor Username: '$HARBOR_USERNAME'"
        
        # Validate variables are not empty
        if [ -z "$HARBOR_URL" ] || [ -z "$HARBOR_PROJECT" ] || [ -z "$HARBOR_USERNAME" ]; then
          echo "❌ Harbor credentials are missing or empty"
          echo "URL: '$HARBOR_URL', Project: '$HARBOR_PROJECT', Username: '$HARBOR_USERNAME'"
          exit 1
        fi
        
        # Install skopeo for Docker registry operations
        echo "Installing skopeo..."
        sudo apt-get update && sudo apt-get install -y skopeo
        
        # Build Docker images locally
        echo "Building Docker images..."
        docker build -t slack.rs:latest .
        docker build -t slack.rs:${{ github.sha }} .
        
        # Push using skopeo with docker save/load approach
        echo "Pushing to Harbor using skopeo..."
        
        # Method 1: Try docker save with output redirect (more compatible)
        echo "Using docker save with output redirect..."
        docker save slack.rs:latest > /tmp/slack.rs-latest.tar
        docker save slack.rs:${{ github.sha }} > /tmp/slack.rs-sha.tar
        
        # Push to Harbor using skopeo
        echo "Pushing images to Harbor..."
        skopeo copy --insecure-policy --dest-tls-verify=false \
          --dest-creds="$HARBOR_USERNAME:$HARBOR_PASSWORD" \
          docker-archive:/tmp/slack.rs-latest.tar \
          docker://$HARBOR_URL/$HARBOR_PROJECT/slack.rs:latest
        
        skopeo copy --insecure-policy --dest-tls-verify=false \
          --dest-creds="$HARBOR_USERNAME:$HARBOR_PASSWORD" \
          docker-archive:/tmp/slack.rs-sha.tar \
          docker://$HARBOR_URL/$HARBOR_PROJECT/slack.rs:${{ github.sha }}
        
        echo "✅ Images pushed successfully to Harbor"
        
    - name: Verify Harbor repository
      run: |
        echo "=== Verify Harbor repository ==="
        
        HARBOR_USERNAME=$(cat /tmp/harbor_username)
        HARBOR_PASSWORD=$(cat /tmp/harbor_password)
        HARBOR_URL=$(cat /tmp/harbor_url)
        HARBOR_PROJECT=$(cat /tmp/harbor_project)
        
        # Verify pushed images via Harbor API (skip TLS verification)
        if curl -k -f -u "$HARBOR_USERNAME:$HARBOR_PASSWORD" "https://$HARBOR_URL/v2/$HARBOR_PROJECT/slack.rs/tags/list"; then
          echo "✅ Harbor repository verified successfully"
        else
          echo "⚠️  Harbor API verification failed (images may still be available)"
        fi
        
        echo "✅ Deployment completed"
        
    - name: Cleanup
      if: always()
      run: |
        echo "=== Cleanup ==="
        
        # Remove sensitive credential files and temporary tar files
        rm -f /tmp/harbor_* /tmp/kubeconfig /tmp/slack.rs-*.tar
        
        echo "✅ Cleanup completed"
