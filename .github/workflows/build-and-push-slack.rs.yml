# GitHub Actions workflow for slack.rs
# Auto-generated by add-runner.sh

name: Harbor HTTPS Debug - Build and Push - slack.rs

on:
  push:
    branches: [ master,main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-push:
    runs-on: slack.rs-runners  # Custom Runner Scale Set
    
    steps:
    - name: ワークフロー開始 - デバッグ版
      run: |
        echo "=== Harbor HTTPS デバッグワークフロー開始 ==="
        echo "ワークフローバージョン: 2025-08-11 最新デバッグ版"
        echo "実行時刻: $(date)"
        
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: kubectl インストール
      run: |
        echo "=== kubectl インストール ==="
        
        # kubectl の最新版をインストール
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/
        
        # インストール確認
        kubectl version --client --output=yaml
        
        echo "✅ kubectl インストール完了"
        
    - name: Harbor認証情報取得
      run: |
        echo "=== Harbor認証情報取得 ==="
        
        # kubectl in-cluster設定
        export KUBECONFIG=/tmp/kubeconfig
        kubectl config set-cluster default \
            --server=https://kubernetes.default.svc \
            --certificate-authority=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt \
            --kubeconfig=$KUBECONFIG
        kubectl config set-credentials default \
            --token=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token) \
            --kubeconfig=$KUBECONFIG
        kubectl config set-context default \
            --cluster=default --user=default \
            --kubeconfig=$KUBECONFIG
        kubectl config use-context default --kubeconfig=$KUBECONFIG
        
        # Harbor認証情報取得
        kubectl get secret harbor-auth -n arc-systems -o yaml | grep "HARBOR_USERNAME:" | awk '{print $2}' | base64 -d > /tmp/harbor_username
        kubectl get secret harbor-auth -n arc-systems -o yaml | grep "HARBOR_PASSWORD:" | awk '{print $2}' | base64 -d > /tmp/harbor_password
        kubectl get secret harbor-auth -n arc-systems -o yaml | grep "HARBOR_URL:" | awk '{print $2}' | base64 -d > /tmp/harbor_url
        kubectl get secret harbor-auth -n arc-systems -o yaml | grep "HARBOR_PROJECT:" | awk '{print $2}' | base64 -d > /tmp/harbor_project
        
        chmod 600 /tmp/harbor_*
        echo "✅ Harbor認証情報取得完了"
        
    - name: Docker認証設定（CA証明書ベースHTTPS）
      run: |
        echo "=== Docker認証設定（CA証明書ベースHTTPS） - 最新デバッグ版 ==="
        
        HARBOR_USERNAME=$(cat /tmp/harbor_username)
        HARBOR_PASSWORD=$(cat /tmp/harbor_password)
        HARBOR_URL=$(cat /tmp/harbor_url)
        
        # CA証明書信頼設定
        echo "CA証明書信頼設定中..."
        
        # initContainerで準備されたCA証明書を使用
        if [[ -f /shared/k8s-ca.crt ]]; then
          echo "initContainerで準備されたCA証明書を使用"
          cp /shared/k8s-ca.crt /tmp/k8s-ca.crt
        else
          echo "kubectl経由でCA証明書を取得"
          kubectl get secret ca-key-pair -n cert-manager -o jsonpath='{.data.tls\.crt}' | base64 -d > /tmp/k8s-ca.crt
        fi
        
        # システムCA信頼ストアに追加
        sudo cp /tmp/k8s-ca.crt /etc/ssl/certs/k8s-ca.crt
        sudo update-ca-certificates
        
        # initContainerで準備されたhosts情報を使用
        if [[ -f /shared/hosts-harbor ]]; then
          echo "initContainerで準備されたhosts情報を使用"
          cat /shared/hosts-harbor | sudo tee -a /etc/hosts
        else
          echo "手動でhosts設定を追加"
          echo "192.168.122.100 harbor.local" | sudo tee -a /etc/hosts
        fi
        
        # hosts設定確認
        echo "=== /etc/hosts 内容確認 ==="
        cat /etc/hosts | grep -E "(harbor|192\.168\.122\.100)" || echo "harbor.local設定が見つかりません"
        
        # DNS解決テスト
        echo "=== DNS解決テスト ==="
        nslookup harbor.local || echo "DNS解決失敗"
        getent hosts harbor.local || echo "hosts解決失敗"
        
        # Docker用CA証明書設定 (harbor.local名での接続用)
        sudo mkdir -p /etc/docker/certs.d/harbor.local
        sudo cp /tmp/k8s-ca.crt /etc/docker/certs.d/harbor.local/ca.crt
        
        # IP用も念の為設定
        sudo mkdir -p /etc/docker/certs.d/$HARBOR_URL
        sudo cp /tmp/k8s-ca.crt /etc/docker/certs.d/$HARBOR_URL/ca.crt
        
        # CA証明書設定確認
        echo "=== CA証明書設定確認 ==="
        ls -la /etc/docker/certs.d/harbor.local/ || echo "Docker CA証明書設定失敗"
        ls -la /etc/ssl/certs/k8s-ca.crt || echo "システムCA証明書設定失敗"
        
        echo "✅ CA証明書信頼設定完了"
        
        # Docker daemon再起動（CA証明書反映のため）
        echo "Docker daemon再起動中..."
        sudo systemctl restart docker || echo "Docker再起動失敗（継続）"
        sleep 5
        
        # Harbor接続テスト
        echo "=== Harbor接続テスト ==="
        curl -v --connect-timeout 10 https://harbor.local/api/v2.0/health 2>&1 | head -20 || echo "Harbor接続テスト失敗"
        
        # Docker login実行（HTTPS接続・harbor.local経由）
        echo "Docker login実行中（HTTPS接続・harbor.local経由）..."
        echo "$HARBOR_PASSWORD" | docker login https://harbor.local -u "$HARBOR_USERNAME" --password-stdin
        
        # 認証確認
        echo "Docker認証状況確認:"
        docker system info | grep -A5 -B5 "Registry" || echo "Registry情報なし"
        
        echo "✅ Docker認証設定完了"
        
    - name: Docker Build
      run: |
        echo "=== Docker Build ==="
        
        HARBOR_URL=$(cat /tmp/harbor_url)
        HARBOR_PROJECT=$(cat /tmp/harbor_project)
        
        # Dockerイメージビルド（harbor.local使用）
        docker build -t harbor.local/$HARBOR_PROJECT/slack.rs:latest .
        docker build -t harbor.local/$HARBOR_PROJECT/slack.rs:${{ github.sha }} .
        
        echo "✅ Docker Build完了"
        
    - name: Harbor Push
      run: |
        echo "=== Harbor Push ==="
        
        HARBOR_USERNAME=$(cat /tmp/harbor_username)
        HARBOR_PASSWORD=$(cat /tmp/harbor_password)
        HARBOR_URL=$(cat /tmp/harbor_url)
        HARBOR_PROJECT=$(cat /tmp/harbor_project)
        
        # CA証明書確認
        echo "CA証明書確認中..."
        if [[ ! -f /etc/docker/certs.d/harbor.local/ca.crt ]]; then
          echo "⚠️ CA証明書が見つかりません。再設定中..."
          kubectl get secret ca-key-pair -n cert-manager -o jsonpath='{.data.tls\.crt}' | base64 -d > /tmp/k8s-ca.crt
          sudo mkdir -p /etc/docker/certs.d/harbor.local
          sudo cp /tmp/k8s-ca.crt /etc/docker/certs.d/harbor.local/ca.crt
          # hosts設定確認
          grep -q "harbor.local" /etc/hosts || echo "192.168.122.100 harbor.local" | sudo tee -a /etc/hosts
        fi
        
        # Docker login再実行（push前確認・HTTPS接続・harbor.local）
        echo "Docker login確認・再実行（HTTPS接続・harbor.local）..."
        echo "$HARBOR_PASSWORD" | docker login https://harbor.local -u "$HARBOR_USERNAME" --password-stdin
        
        # Docker push実行
        echo "Docker push実行中..."
        
        # latest tagのpush
        echo "推す対象: harbor.local/$HARBOR_PROJECT/slack.rs:latest"
        if timeout 60 docker push harbor.local/$HARBOR_PROJECT/slack.rs:latest; then
          echo "✅ latest push成功"
        else
          echo "⚠️ latest push失敗（継続）"
        fi
        
        # SHA tagのpush
        echo "推す対象: harbor.local/$HARBOR_PROJECT/slack.rs:${{ github.sha }}"
        if timeout 60 docker push harbor.local/$HARBOR_PROJECT/slack.rs:${{ github.sha }}; then
          echo "✅ SHA push成功"
        else
          echo "⚠️ SHA push失敗（継続）"
        fi
        
        echo "✅ Harbor Push完了"
        
    - name: プッシュ結果確認
      run: |
        echo "=== プッシュ結果確認 ==="
        
        HARBOR_USERNAME=$(cat /tmp/harbor_username)
        HARBOR_PASSWORD=$(cat /tmp/harbor_password)
        HARBOR_URL=$(cat /tmp/harbor_url)
        HARBOR_PROJECT=$(cat /tmp/harbor_project)
        
        # プッシュされたイメージ確認
        curl -u $HARBOR_USERNAME:$HARBOR_PASSWORD "https://harbor.local/v2/$HARBOR_PROJECT/slack.rs/tags/list" || echo "イメージ一覧取得失敗"
        
        echo "✅ デプロイ完了"
        
    - name: クリーンアップ
      if: always()
      run: |
        echo "=== クリーンアップ ==="
        
        # 認証情報ファイルを安全に削除
        rm -f /tmp/harbor_* /tmp/kubeconfig
        
        echo "✅ クリーンアップ完了"
