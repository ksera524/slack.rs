# GitHub Actions workflow for slack.rs
# Insecure Registry Approach - Simplified and Practical

name: Build and Push to Harbor (Insecure Registry) - slack.rs

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-push:
    runs-on: slack.rs-runners  # Custom Runner Scale Set
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup kubectl and Harbor credentials
      run: |
        echo "=== Setup kubectl and Harbor credentials ==="
        
        # Install kubectl
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/
        
        # Configure kubectl for in-cluster access
        export KUBECONFIG=/tmp/kubeconfig
        kubectl config set-cluster default \
            --server=https://kubernetes.default.svc \
            --certificate-authority=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt \
            --kubeconfig=$KUBECONFIG
        kubectl config set-credentials default \
            --token=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token) \
            --kubeconfig=$KUBECONFIG
        kubectl config set-context default \
            --cluster=default --user=default \
            --kubeconfig=$KUBECONFIG
        kubectl config use-context default --kubeconfig=$KUBECONFIG
        
        # Get Harbor credentials
        kubectl get secret harbor-auth -n arc-systems -o yaml | grep "HARBOR_USERNAME:" | awk '{print $2}' | base64 -d > /tmp/harbor_username
        kubectl get secret harbor-auth -n arc-systems -o yaml | grep "HARBOR_PASSWORD:" | awk '{print $2}' | base64 -d > /tmp/harbor_password
        kubectl get secret harbor-auth -n arc-systems -o yaml | grep "HARBOR_URL:" | awk '{print $2}' | base64 -d > /tmp/harbor_url
        kubectl get secret harbor-auth -n arc-systems -o yaml | grep "HARBOR_PROJECT:" | awk '{print $2}' | base64 -d > /tmp/harbor_project
        
        chmod 600 /tmp/harbor_*
        echo "✅ Harbor credentials retrieved successfully"
        
    - name: Configure Docker for insecure registry
      run: |
        echo "=== Configure Docker for insecure registry ==="
        
        HARBOR_URL=$(cat /tmp/harbor_url)
        
        # Create Docker daemon configuration for insecure registry
        sudo mkdir -p /etc/docker
        echo '{
          "insecure-registries": ["'$HARBOR_URL'", "192.168.122.100:8080", "harbor.local"],
          "registry-mirrors": [],
          "log-driver": "json-file",
          "log-opts": {
            "max-size": "10m",
            "max-file": "3"
          }
        }' | sudo tee /etc/docker/daemon.json
        
        # Add harbor.local to hosts file for DNS resolution
        echo "$HARBOR_URL harbor.local" | sudo tee -a /etc/hosts
        
        # Verify Docker configuration
        echo "Docker daemon.json:"
        cat /etc/docker/daemon.json
        
        echo "Hosts file entry:"
        grep -E "(harbor|$HARBOR_URL)" /etc/hosts || echo "No harbor entries found"
        
        echo "✅ Docker insecure registry configuration completed"
        
    - name: Docker login and build
      run: |
        echo "=== Docker login and build ==="
        
        HARBOR_USERNAME=$(cat /tmp/harbor_username)
        HARBOR_PASSWORD=$(cat /tmp/harbor_password)
        HARBOR_URL=$(cat /tmp/harbor_url)
        HARBOR_PROJECT=$(cat /tmp/harbor_project)
        
        # Set Docker environment variables for insecure registry
        export DOCKER_TLS_VERIFY=""
        export DOCKER_HOST=""
        export DOCKER_CERT_PATH=""
        
        # Docker login using insecure registry (HTTP)
        echo "Logging into Harbor using insecure registry..."
        echo "Docker daemon configuration:"
        cat /etc/docker/daemon.json || echo "daemon.json not found"
        
        # Try multiple approaches for insecure connection
        echo "Attempting Docker login with HTTP..."
        if echo "$HARBOR_PASSWORD" | docker login http://$HARBOR_URL -u "$HARBOR_USERNAME" --password-stdin; then
          echo "✅ HTTP login successful"
        else
          echo "HTTP login failed, trying with IP only..."
          if echo "$HARBOR_PASSWORD" | docker login $HARBOR_URL -u "$HARBOR_USERNAME" --password-stdin; then
            echo "✅ IP-only login successful"  
          else
            echo "❌ Both login attempts failed"
            echo "Checking Docker daemon status..."
            docker info | head -20
            exit 1
          fi
        fi
        
        # Build Docker images
        echo "Building Docker images..."
        docker build -t $HARBOR_URL/$HARBOR_PROJECT/slack.rs:latest .
        docker build -t $HARBOR_URL/$HARBOR_PROJECT/slack.rs:${{ github.sha }} .
        
        echo "✅ Docker login and build completed successfully"
        
    - name: Push to Harbor
      run: |
        echo "=== Push to Harbor ==="
        
        HARBOR_URL=$(cat /tmp/harbor_url)
        HARBOR_PROJECT=$(cat /tmp/harbor_project)
        
        # Push latest tag
        echo "Pushing $HARBOR_URL/$HARBOR_PROJECT/slack.rs:latest"
        if docker push $HARBOR_URL/$HARBOR_PROJECT/slack.rs:latest; then
          echo "✅ Latest tag pushed successfully"
        else
          echo "❌ Failed to push latest tag"
          exit 1
        fi
        
        # Push SHA tag
        echo "Pushing $HARBOR_URL/$HARBOR_PROJECT/slack.rs:${{ github.sha }}"
        if docker push $HARBOR_URL/$HARBOR_PROJECT/slack.rs:${{ github.sha }}; then
          echo "✅ SHA tag pushed successfully"
        else
          echo "❌ Failed to push SHA tag"
          exit 1
        fi
        
        echo "✅ All images pushed successfully to Harbor"
        
    - name: Verify Harbor repository
      run: |
        echo "=== Verify Harbor repository ==="
        
        HARBOR_USERNAME=$(cat /tmp/harbor_username)
        HARBOR_PASSWORD=$(cat /tmp/harbor_password)
        HARBOR_URL=$(cat /tmp/harbor_url)
        HARBOR_PROJECT=$(cat /tmp/harbor_project)
        
        # Verify pushed images via Harbor API
        if curl -f -u "$HARBOR_USERNAME:$HARBOR_PASSWORD" "http://$HARBOR_URL/v2/$HARBOR_PROJECT/slack.rs/tags/list"; then
          echo "✅ Harbor repository verified successfully"
        else
          echo "⚠️  Harbor API verification failed (images may still be available)"
        fi
        
        echo "✅ Deployment completed"
        
    - name: Cleanup
      if: always()
      run: |
        echo "=== Cleanup ==="
        
        # Remove sensitive credential files
        rm -f /tmp/harbor_* /tmp/kubeconfig
        
        echo "✅ Cleanup completed"