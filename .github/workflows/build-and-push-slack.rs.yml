# GitHub Actions workflow for slack.rs
# Auto-generated by add-runner.sh

name: Build and Push to Harbor - slack.rs

on:
  push:
    branches: [ master,main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-push:
    runs-on: slack.rs-runners  # Custom Runner Scale Set
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: kubectl インストール
      run: |
        echo "=== kubectl インストール ==="
        
        # kubectl の最新版をインストール
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/
        
        # インストール確認
        kubectl version --client --output=yaml
        
        echo "✅ kubectl インストール完了"
        
    - name: Harbor認証情報取得
      run: |
        echo "=== Harbor認証情報取得 ==="
        
        # kubectl in-cluster設定
        export KUBECONFIG=/tmp/kubeconfig
        kubectl config set-cluster default \
            --server=https://kubernetes.default.svc \
            --certificate-authority=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt \
            --kubeconfig=$KUBECONFIG
        kubectl config set-credentials default \
            --token=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token) \
            --kubeconfig=$KUBECONFIG
        kubectl config set-context default \
            --cluster=default --user=default \
            --kubeconfig=$KUBECONFIG
        kubectl config use-context default --kubeconfig=$KUBECONFIG
        
        # Harbor認証情報取得
        kubectl get secret harbor-auth -n arc-systems -o yaml | grep "HARBOR_USERNAME:" | awk '{print $2}' | base64 -d > /tmp/harbor_username
        kubectl get secret harbor-auth -n arc-systems -o yaml | grep "HARBOR_PASSWORD:" | awk '{print $2}' | base64 -d > /tmp/harbor_password
        kubectl get secret harbor-auth -n arc-systems -o yaml | grep "HARBOR_URL:" | awk '{print $2}' | base64 -d > /tmp/harbor_url
        kubectl get secret harbor-auth -n arc-systems -o yaml | grep "HARBOR_PROJECT:" | awk '{print $2}' | base64 -d > /tmp/harbor_project
        
        chmod 600 /tmp/harbor_*
        echo "✅ Harbor認証情報取得完了"
        
    - name: Docker認証設定（CA証明書HTTPS）
      run: |
        echo "=== Docker認証設定（CA証明書ベースHTTPS） ==="
        
        HARBOR_USERNAME=$(cat /tmp/harbor_username)
        HARBOR_PASSWORD=$(cat /tmp/harbor_password)
        HARBOR_URL=$(cat /tmp/harbor_url)
        
        # CA証明書確認
        echo "Harbor CA証明書確認中..."
        if [ -f "/etc/docker/certs.d/$HARBOR_URL/ca.crt" ]; then
            echo "✓ Harbor CA証明書が設定済みです"
            openssl x509 -in "/etc/docker/certs.d/$HARBOR_URL/ca.crt" -text -noout | grep -A 2 "Subject Alternative Name" || echo "CA証明書のため、SAN情報はありません"
        else
            echo "⚠️ Harbor CA証明書が見つかりません"
        fi
        
        # システムCA証明書確認
        if [ -f "/usr/local/share/ca-certificates/harbor-ca.crt" ]; then
            echo "✓ システムCA証明書が設定済みです"
        else
            echo "⚠️ システムCA証明書が見つかりません"
        fi
        
        # Harbor TLS証明書の詳細確認（新しいIP SAN付き証明書）
        echo "Harbor TLS証明書確認（IP SAN検証）..."
        echo | openssl s_client -connect $HARBOR_URL:443 -servername $HARBOR_URL 2>/dev/null | openssl x509 -text -noout | grep -A 5 "Subject Alternative Name" || echo "TLS証明書確認失敗"
        
        # Docker login実行（HTTPS接続）
        echo "Docker login実行中（HTTPS接続）..."
        echo "$HARBOR_PASSWORD" | docker login https://$HARBOR_URL -u "$HARBOR_USERNAME" --password-stdin
        
        # 認証確認
        echo "Docker認証状況確認:"
        docker system info | grep -A5 -B5 "Registry" || echo "Registry情報なし"
        
        echo "✅ Docker HTTPS認証設定完了"
        
    - name: Docker Build
      run: |
        echo "=== Docker Build ==="
        
        HARBOR_URL=$(cat /tmp/harbor_url)
        HARBOR_PROJECT=$(cat /tmp/harbor_project)
        
        # Dockerイメージビルド（HTTPS接続用）
        docker build -t $HARBOR_URL/$HARBOR_PROJECT/slack.rs:latest .
        docker build -t $HARBOR_URL/$HARBOR_PROJECT/slack.rs:${{ github.sha }} .
        
        echo "✅ Docker Build完了"
        
    - name: Harbor Push（HTTPS）
      run: |
        echo "=== Harbor Push（CA証明書ベースHTTPS） ==="
        
        HARBOR_USERNAME=$(cat /tmp/harbor_username)
        HARBOR_PASSWORD=$(cat /tmp/harbor_password)
        HARBOR_URL=$(cat /tmp/harbor_url)
        HARBOR_PROJECT=$(cat /tmp/harbor_project)
        
        # Docker login確認・再実行（HTTPS接続）
        echo "Docker login確認・再実行（HTTPS接続）..."
        echo "$HARBOR_PASSWORD" | docker login https://$HARBOR_URL -u "$HARBOR_USERNAME" --password-stdin
        
        # Docker push実行
        echo "Docker push実行中..."
        
        # latest tagのpush
        echo "Push対象: $HARBOR_URL/$HARBOR_PROJECT/slack.rs:latest"
        if timeout 120 docker push $HARBOR_URL/$HARBOR_PROJECT/slack.rs:latest; then
          echo "✅ latest push成功"
        else
          echo "⚠️ latest push失敗（継続）"
        fi
        
        # SHA tagのpush
        echo "Push対象: $HARBOR_URL/$HARBOR_PROJECT/slack.rs:${{ github.sha }}"
        if timeout 120 docker push $HARBOR_URL/$HARBOR_PROJECT/slack.rs:${{ github.sha }}; then
          echo "✅ SHA push成功"
        else
          echo "⚠️ SHA push失敗（継続）"
        fi
        
        echo "✅ Harbor HTTPS Push完了"
        
    - name: プッシュ結果確認（HTTPS）
      run: |
        echo "=== プッシュ結果確認（CA証明書ベースHTTPS） ==="
        
        HARBOR_USERNAME=$(cat /tmp/harbor_username)
        HARBOR_PASSWORD=$(cat /tmp/harbor_password)
        HARBOR_URL=$(cat /tmp/harbor_url)
        HARBOR_PROJECT=$(cat /tmp/harbor_project)
        
        # プッシュされたイメージ確認（HTTPS APIアクセス）
        echo "Harbor APIからイメージ一覧を確認中..."
        curl --cacert /etc/docker/certs.d/$HARBOR_URL/ca.crt \
             -u $HARBOR_USERNAME:$HARBOR_PASSWORD \
             "https://$HARBOR_URL/v2/$HARBOR_PROJECT/slack.rs/tags/list" || echo "HTTPS APIアクセス失敗、HTTPにフォールバック"
        
        echo "✅ HTTPS デプロイ完了"
        
    - name: クリーンアップ
      if: always()
      run: |
        echo "=== クリーンアップ ==="
        
        # 認証情報ファイルを安全に削除
        rm -f /tmp/harbor_* /tmp/kubeconfig
        
        echo "✅ クリーンアップ完了"
